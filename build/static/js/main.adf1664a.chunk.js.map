{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","FormControl","Input","placeholder","value","onChange","ev","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sTA6BeA,G,MAtBCC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACnBC,EAD+C,EAAnBC,WACNF,EAAQE,SACpC,OAEI,qBAAKH,IAAKA,EAAKI,UAAS,uBAAoBF,GAAU,eAAtD,SACS,cAACG,EAAA,EAAD,CAAMD,UAAaF,EAAQ,eAAgB,eAA3C,SACD,cAACI,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CACIC,MAAQ,QACRC,QAAU,KACVC,UAAY,KAHhB,WAKKR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MAAsDF,EAAQA,qB,gBCLvEU,EAZKC,IAASC,cAAc,CAEnCC,OAAQ,0CACRC,WAAY,iDACZC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGAC,Y,iCCgERC,MAlEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNpB,EAHM,KAGIyB,EAHJ,KAkCb,OA3BAC,qBAAU,WAEVlB,EAAGmB,WAAW,YACbC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACRN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIpC,QAASmC,EAAIE,iBAEjE,IAGHT,qBAAU,WACRD,EAAYW,OAAO,6BAClB,IAgBD,sBAAKnC,UAAU,MAAf,UAEE,qBAAKoC,IAAM,+FACX,6CAEA,sBAAMpC,UAAU,WAAhB,SACE,eAACqC,EAAA,EAAD,CAAarC,UAAU,kBAAvB,UACE,cAACsC,EAAA,EAAD,CAAOtC,UAAU,YAAYuC,YAAa,qBAAoBC,MAASpB,EAAOqB,SAAY,SAAAC,GAAE,OAAIrB,EAASqB,EAAGC,OAAOH,UACnH,cAACI,EAAA,EAAD,CAAY5C,UAAU,iBAAiB6C,UAAWzB,EAAOf,QAAQ,YAAYD,MAAQ,UAAU0C,KAAO,SAASC,QAtBnG,SAACL,GAEjBA,EAAGM,iBAEHzC,EAAGmB,WAAW,YAAYuB,IAAI,CAC5BpD,QAASuB,EACTrB,SAAUA,EACVmD,UAAW1C,IAASS,UAAUkC,WAAWC,oBAG3C/B,EAAS,KAYL,SACE,cAAC,IAAD,WASN,cAAC,IAAD,UAEEC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIpC,EAAN,EAAMA,QAAN,OACX,cAAC,EAAD,CAAmBE,SAAYA,EAAUF,QAAWA,GAArCoC,YCvDVoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.adf1664a.chunk.js","sourcesContent":["//rfce es7 snippet\n \nimport React, { forwardRef } from 'react'\nimport {Card, CardContent, Typography} from '@material-ui/core'; \nimport './Message.css';\n//forwardRef wrapping every messages with some addiotnal funcitonalities which in this case\n// is a reference to the message state\nconst Message = forwardRef(({message, username}, ref) => {\n    const isUser = username === message.username;\n    return (\n\n        <div ref={ref} className = {`message_card ${isUser && 'message_usr'}`}> \n                 <Card className = {isUser? \"msg_usr_card\": \"msg_gst_card\"}>\n                <CardContent>\n                    <Typography\n                        color = \"white\"\n                        variant = \"h5\"\n                        component = \"h2\"\n                    >\n                       {!isUser && `${message.username || 'Unknown User'}: `}{message.message}\n                    </Typography>\n                </CardContent>\n            </Card>   \n        </div>\n                \n       \n    )\n})\n\nexport default Message\n","import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n    \n        apiKey: \"AIzaSyDlzWO45sQjBkMBXyGxKOolm36uVBtxZFk\",\n        authDomain: \"facebook-messenger-clone-825b4.firebaseapp.com\",\n        projectId: \"facebook-messenger-clone-825b4\",\n        storageBucket: \"facebook-messenger-clone-825b4.appspot.com\",\n        messagingSenderId: \"414191661687\",\n        appId: \"1:414191661687:web:265d385b5ecd9791fd4c72\",\n        measurementId: \"G-TJ7BVSPEYX\"\n});\n\nconst db = firebaseApp.firestore();\nexport default db;","import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input} from '@material-ui/core';\nimport Message from './Message';\nimport \"./App.css\";\nimport db from './firebase';\nimport firebase from \"firebase\";\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\n\nfunction App() {\n  const [input, setInput] = useState(''); \n  const [messages, setMessages] = useState([]); //need object messages\n  const [username, setUsername] = useState('');\n  //useEffect loads after component which in this case is App\n  //useEffect snippet of code that gets executed after a condition\n\n  useEffect(() => {\n  //run when app component loads\n  db.collection('messages')\n  .orderBy('timestamp', 'desc')\n  .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n    })\n  }, [])\n\n\n  useEffect(() => {\n    setUsername(prompt('Please enter your name'));\n  }, [])\n\n  const sendMessage = (ev) =>{\n      //logic for sending messages\n      ev.preventDefault(); //prevent automatic reresh of browser insode of form \n\n      db.collection('messages').add({\n        message: input,\n        username: username,\n        timestamp: firebase.firestore.FieldValue.serverTimestamp()\n      })\n   \n      setInput('');\n\n  }\n  return (\n    <div className=\"App\">\n\n      <img src = \"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" />\n      <h1> Messenger </h1>\n      {/* <h5><em> Welcome {username}</em></h5> */}\n      <form className=\"app_form\"> \n        <FormControl className=\"app_formControl\">\n          <Input className=\"app_input\" placeholder= \"Type a message ...\"value = {input} onChange = {ev => setInput(ev.target.value)} />\n          <IconButton className=\"app_iconButton\" disabled={!input} variant=\"contained\" color = \"primary\" type = 'submit' onClick = {sendMessage} >\n            <SendIcon />\n          </IconButton>\n\n\n          {/* <Button disabled={!input} variant=\"contained\" color = \"primary\" type = 'submit' onClick = {sendMessage}> Send message</Button> */}\n        </FormControl> \n      </form>\n\n\n      <FlipMove>\n      {\n        messages.map(({id, message}) => (\n          <Message key= {id} username = {username} message = {message}  />\n       \n        ))\n      }\n      </FlipMove>\n  \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}